    1  wsl --shutdown
    2  wsl
    3  exit
    4  sudo apt update
    5  sudo apt install gimp -y
    6  gimp
    7  sudo apt update && apt -y upgrade
    8  sudo rm -rf /var/lib/apt/lists/*
    9  sudo apt clean
   10  sudo apt update -o Acquire::CompressionTypes::Order::=gz
   11  sudo apt upgrade
   12  sudo apt -y install xfce4
   13  sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bak
   14  exit
   15  sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bak
   16  sudo apt update
   17  sudo apt install -y xrdp xfce4 xfce4-goodies
   18  sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bak
   19  sudo sed -i 's/max_bpp=32/#max_bpp=32nmax_bpp=128/g' /etc/xrdp/xrdp.ini
   20  sudo sed -i 's/3389/3390/g' /etc/xrdp/xrdp.ini
   21  # sudo sed -i 's/xserverbpp=24/#xserverbpp=24nxserverbpp=128/g' /etc/xrdp/xrdp.ini
   22  sudo /etc/init.d/xrdp start
   23  sudo service xrdp status
   24  netsh interface portproxy add v4tov4 listenport=3389 listenaddress=127.0.0.1 connectport=3389 connectaddress=<WSL_IP>
   25  hostname -I
   26  netsh interface portproxy add v4tov4 listenport=3389 listenaddress=127.0.0.1 connectport=3389 connectaddress=172.28.109.74
   27  sudo service xrdp status
   28  sudo bang
   29  su - bang
   30  sudo passwd root
   31  echo xfce4-session > ~/.xsession
   32  sudo vi /etc/xrdp/startwm.sh
   33  sudo service xrdp restart
   34  sudo service xrdp status
   35  sudo service xrdp stop
   36  python3 --version
   37  sudo apt install python3.11 python3-virtualenv curl wget unzip
   38  sudo apt update
   39  sudo apt install -y software-properties-common
   40  sudo add-apt-repository ppa:deadsnakes/ppa -y
   41  sudo apt update
   42  sudo apt install -y python3.11
   43  sudo apt install python3.11 python3-virtualenv curl wget unzip
   44  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
   45  . "$HOME/.cargo/env"
   46  cd
   47  virtualenv -p /usr/bin/python3.11 ~/venv/mlc
   48  wget https://redirector.gvt1.com/edgedl/android/studio/ide-zips/2024.1.2.13/android-studio-2024.1.2.13-linux.tar.gz
   49  tar xvf android-studio-2024.1.2.13-linux.tar.gz
   50  mv android-studio ~/
   51  wget https://dl.google.com/android/repository/commandlinetools-linux-13114758_latest.zip
   52  unzip commandlinetools-linux-13114758_latest.zip
   53  mkdir -p ~/android-studio/cmdline-tools/latest
   54  mv cmdline-tools/* ~/android-studio/cmdline-tools/latest
   55  \export ANDROID_HOME=~/android-studio
   56  export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
   57  export JAVA_HOME=$ANDROID_HOME/jbr
   58  yes | sdkmanager --licenses
   59  sdkmanager --update
   60  sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0"
   61  sdkmanager "ndk;27.2.12479018" "cmake;3.22.1"
   62  export PATH=$PATH:$ANDROID_HOME/cmake/3.22.1/bin:$ANDROID_HOME/platform-tools
   63  export ANDROID_NDK=$ANDROID_HOME/ndk/27.2.12479018
   64  $ source ~/venv/mlc/bin/activate
   65  source ~/venv/mlc/bin/activate
   66  deactivate 
   67  whoami
   68  pwd
   69  ls -l /root
   70  cd ~/projects/intelligent-minwon-assistant
   71  cd
   72  mkdir -p ~/projects/intelligent-minwon-assistant
   73  cd ~/projects/intelligent-minwon-assistant
   74  mkdir -p ~/projects/intelligent-minwon-assistant
   75  cd ~/projects/intelligent-minwon-assistant
   76  # 설치 파일 다운로드
   77  wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
   78  # 설치 스크립트 실행
   79  bash Miniconda3-latest-Linux-x86_64.sh
   80  # 설치 파일 다운로드
   81  wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
   82  # 설치 스크립트 실행
   83  bash Miniconda3-latest-Linux-x86_64.sh
   84  # 프로젝트 폴더로 다시 이동
   85  cd ~/projects/intelligent-minwon-assistant
   86  # 'minwon_ai' 가상환경 생성
   87  conda create -n minwon_ai python=3.11 -y
   88  # 가상환경 활성화
   89  conda activate minwon_ai
   90  # 설치 파일 다운로드
   91  wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
   92  # 설치 스크립트 실행
   93  bash Miniconda3-latest-Linux-x86_64.sh
   94  # 프로젝트 폴더로 다시 이동
   95  cd ~/projects/intelligent-minwon-assistant
   96  # 'minwon_ai' 가상환경 생성
   97  conda create -n minwon_ai python=3.11 -y
   98  # 가상환경 활성화
   99  conda activate minwon_ai
  100  exit
  101  # 프로젝트 폴더로 다시 이동
  102  cd ~/projects/intelligent-minwon-assistant
  103  # 'minwon_ai' 가상환경 생성
  104  conda create -n minwon_ai python=3.11 -y
  105  # 가상환경 활성화
  106  conda activate minwon_ai
  107  python
  108  python3 --version
  109  conda install -c pytorch faiss-gpu -y
  110  pip install requests fastapi uvicorn langchain langchain-community langchain-openai sentence-transformers mysql-connector-python python-dotenv
  111  exit
  112  ll
  113  cd
  114  ll
  115  cd projects/
  116  ll
  117  cd ..
  118  conda activate minwon_ai
  119  exit
  120  cd
  121  cd projects/intelligent-minwon-assistant/
  122  conda activate minwon_ai
  123  # 1. Windows IP 주소를 변수에 저장
  124  WIN_HOST_IP=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')
  125  echo "MySQL 접속 IP를 찾았습니다: $WIN_HOST_IP"
  126  # 2. 이 IP 주소를 사용하여 .env 파일을 새로 생성합니다.
  127  cat <<EOF > .env
  128  # 데이터베이스 설정
  129  DB_HOST=${WIN_HOST_IP}
  130  DB_PORT=3306
  131  DB_USER=root
  132  DB_PASSWORD=1234
  133  DB_NAME=minwon_db
  134  # OpenAI 키는 현재 사용하지 않으므로 비워두거나 삭제해도 됩니다.
  135  OPENAI_API_KEY=
  136  EOF
  137  echo "✅ .env 파일이 성공적으로 생성되었습니다."
  138  nano scripts/data_collector.py
  139  conda activate minwon_ai
  140  ll
  141  cd 
  142  cd projects/
  143  cd intelligent-minwon-assistant/
  144  ll
  145  nano scripts/data_collector.py
  146  mkdir scripts
  147  nano scripts/data_collector.py
  148  mkdir ai-engine
  149  nano ai-engine/create_index.py
  150  nano ai-engine/main.py
  151  vi .env 
  152  # 1. Windows IP 주소를 변수에 다시 한번 저장합니다.
  153  WIN_HOST_IP=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')
  154  echo "MySQL 접속 IP: $WIN_HOST_IP"
  155  # 2. .env 파일을 새로 생성하거나 덮어씁니다.
  156  # API_SERVICE_KEY에 제공해주신 키를 반영했습니다.
  157  cat <<EOF > .env
  158  # 데이터베이스 설정
  159  DB_HOST=${WIN_HOST_IP}
  160  DB_PORT=3306
  161  DB_USER=root
  162  DB_PASSWORD=1234
  163  DB_NAME=minwon_db
  164  # API 설정
  165  API_SERVICE_KEY=zsD3/CI96qsHNNUP3EHJQ/XT225wNRVi2bB7urr8/u6BKvmuukC9mV4h/P+M1AYPfYvBxXsVfRczIQC86OB/7w==
  166  # OpenAI 설정 (현재 사용 안함)
  167  OPENAI_API_KEY=
  168  EOF
  169  echo "✅ .env 파일이 API 키로 업데이트되었습니다."
  170  mkdir models
  171  ll
  172  mv "/mnt/c/Users/SMART07/.lmstudio/models/MLP-KTLim/llama-3-Korean-Bllossom-8B-gguf-Q4_K_M" "/root/projects/intelligent-minwon-assistant/models/"
  173  ll
  174  cd models/\
  175  cd models/
  176  ll
  177  cd llama-3-Korean-Bllossom-8B-gguf-Q4_K_M/
  178  ll
  179  exit
  180  conda activate minwon_ai
  181  /root/miniconda3/bin/python /root/projects/intelligent-minwon-assistant/gpu_check.py
  182  /root/miniconda3/envs/minwon_ai/bin/python /root/projects/intelligent-minwon-assistant/gpu_check.py
  183  conda activate minwon_ai
  184  pip list
  185  ls -l ./models/
  186  ls -l ~/projects/intelligent-minwon-assistant/models/llama-3-Korean-Bllossom-8B-gguf-Q4_K_M/
  187  ollama create bllossom-local -f ./ai-engine/Bllossom.modelfile
  188  curl -fsSL https://ollama.com/install.sh | sh
  189  ollama create bllossom-local -f ./ai-engine/Bllossom.modelfile
  190  ollama create bllossom-local:latest -f ./ai-engine/Bllossom.modelfile
  191  ollama create bllossom:latest -f ./ai-engine/Bllossom.modelfile
  192  ollama create bllossom -f ./ai-engine/Bllossom.modelfile
  193  sudo ollama stop
  194  sudo rm $(which ollama)
  195  which ollama
  196  ls /usr/local/bin/ollama
  197  ls /usr/bin/ollama
  198  Ollama --version\
  199  Ollama --version
  200  wget https://github.com/ollama/ollama/releases/download/v0.5.4/ollama-linux-amd64
  201  ls -l ./ai-engine/Bllossom.modelfile
  202  cat ./ai-engine/Bllossom.modelfile
  203  realpath ../models/llama-3-Korean-Bllossom-8B-gguf-Q4_K_M/llama-3-Korean-Bllossom-8B-gguf-Q4_K_M.gguf
  204  find ~ -name "llama-3-Korean-Bllossom-8B-gguf-Q4_K_M.gguf"
  205  cd models/
  206  cd llama-3-Korean-Bllossom-8B-gguf-Q4_K_M/
  207  ll
  208  ollama create bllossom -f ./ai-engine/Bllossom.modelfile
  209  curl -fsSL https://ollama.com/install.sh | sh
  210  ollama --version
  211  ollama create bllossom -f ./ai-engine/Bllossom.modelfile
  212  CD ,,
  213  CD ..
  214  python /root/.windsurf-server/extensions/ms-python.python-2025.4.0/python_files/printEnvVariablesToFile.py /root/.windsurf-server/extensions/ms-python.python-2025.4.0/python_files/deactivate/bash/envVars.txt
  215  python /root/.windsurf-server/extensions/ms-python.python-2025.4.0/python_files/printEnvVariablesToFile.py /root/.windsurf-server/extensions/ms-python.python-2025.4.0/python_files/deactivate/bash/envVars.txt
  216  /root/miniconda3/envs/minwon_ai/bin/python /root/projects/intelligent-minwon-assistant/gpu_check.py
  217  ollama create bllossom:latest -f ./ai-engine/Bllossom.modelfile
  218  uvicorn ai-engine.main:app --host 0.0.0.0 --port 8000
  219  conda deactivate
  220  conda activate minwon_ai
  221  which uvicorn
  222  uvicorn ai-engine.main:app --host 0.0.0.0 --port 8000
  223  python scripts/data_collector.py
  224  git status
  225  git init
  226  nano .gitignore
  227  git status
  228  git remote add origin https://github.com/banghyunmin1999/intelligent-minwon-assistant.git
  229  git add .
  230  git status
  231  git add .
  232  git status
  233  git rm --cached -r models
  234  git status
  235  git add .
  236  git commit
  237  git status
  238  git push
  239  git push --set-upstream origin master
  240  git push --set-upstream origin main
  241  git commit -m "feat: Initial project setup and AI engine implementation"
  242  git push --set-upstream origin master
  243  git config --global init.defaultBranch
  244  git config --global init.defaultBranch main
  245  git branch -m master main
  246  git push --set-upstream origin main
  247  git push --force origin main
  248  git push
  249  python ai-engine/create_index.py 
  250  ping 172.20.48.1
  251  ping 192.168.0.109
  252  sudo apt update
  253  sudo apt install mysql-server
  254  sudo service mysql start
  255  sudo mysql_secure_installation
  256  sudo mysql -u root -p
  257  sudo mysql -u root
  258  SET GLOBAL validate_password_policy = LOW;
  259  SET GLOBAL validate_password_length = 4;
  260  mysql -u root
  261  python scripts/data_collector.py 
  262  sudo service mysql status
  263  sudo netstat -tnlp | grep 3306
  264  python scripts/data_collector.py 
  265  /root/miniconda3/envs/minwon_ai/bin/python /root/projects/intelligent-minwon-assistant/test.py
  266  unset DB_HOST
  267  /root/miniconda3/envs/minwon_ai/bin/python /root/projects/intelligent-minwon-assistant/test.py
  268  python scripts/data_collector.py 
  269  python ai-engine/create_index.py 
  270  ollama serve
  271  pip install -U langchain-huggingface
  272  ps aux | grep ollama
  273  kill 9148
  274  ollama serve
  275  ps aux | grep ollama
  276  uvicorn main:app --reload --port 8000
  277  uvicorn ai-engine/main:app --reload --port 8000
  278  cd ai-engine/
  279  uvicorn main:app --reload --port 8000
  280  ls -l ai-engine/faiss_index/
  281  cd ..
  282  tre
  283  tree
  284  snap install tree
  285  tree
  286  cd ~/projects/intelligent-minwon-assistant/ai-engine
  287  uvicorn main:app --reload --port 8000
  288  claer
  289  clear
  290  history >> text.txt
